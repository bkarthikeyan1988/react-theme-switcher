{"version":3,"sources":["Context/ThemeContext.js","Components/ThemeToggler.js","Components/Header.js","Components/ThemeSwitcher.js","Components/HeroSection.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeToggler","useContext","themeMode","setThemeMode","className","onClick","Header","ThemeSwitcher","light","textColor","backgroundColor","border","btnColor","dark","HeroSection","theme","currentTheme","style","padding","color","textAlign","fontSize","App","themeHook","useState","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAIeA,G,KAFMC,wBAAc,CAAC,QAAS,gB,OCa9BC,EAZM,WAAO,IAAD,EACSC,qBAAWH,GADpB,mBAClBI,EADkB,KACPC,EADO,KAGzB,OACE,yBAAKC,UAAU,gBAAgBC,QAAS,WACtCF,EAA2B,UAAdD,EAAwB,OAAS,WAE9C,8BAAqB,UAAdA,EAAwB,WAAa,eCGnCI,EATA,WACb,OACE,gCACE,gGACA,kBAAC,EAAD,QCOSC,EAfO,CAClBC,MAAO,CACHC,UAAW,UACXC,gBAAiB,UACjBC,OAAQ,oBACRC,SAAU,WAEdC,KAAM,CACFJ,UAAW,UACXC,gBAAiB,UACjBC,OAAQ,qBACRC,SAAU,YCiBHE,EAxBK,WAChB,IAAMC,EAAQd,qBAAWH,GAAc,GACjCkB,EAAeT,EAAcQ,GAEnC,OACI,yBAAKE,MAAO,CACRC,QAAS,OACTR,gBAAgB,GAAD,OAAKM,EAAaN,iBACjCS,MAAM,GAAD,OAAKH,EAAaP,WACvBW,UAAW,WAEX,0DACA,iQACA,4BAAQH,MAAO,CACXP,gBAAgB,GAAD,OAAKM,EAAaJ,UACjCM,QAAS,YACTG,SAAU,OACVF,MAAO,OACPR,OAAO,GAAD,OAAKK,EAAaL,UAL5B,cCCGW,G,MAZH,WACV,IAAMC,EAAYC,mBAAS,SAC3B,OACE,kBAAC,EAAaC,SAAd,CAAuBC,MAAOH,GAC5B,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,UCAYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6c2dbc1e.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst ThemeContext = createContext([\"light\", () => {}]);\n\nexport default ThemeContext;\n","import React, { useContext } from \"react\";\nimport ThemeContext from \"../Context/ThemeContext\";\n\nconst ThemeToggler = () => {\n  const [themeMode, setThemeMode] = useContext(ThemeContext);\n\n  return (\n    <div className=\"themeSwitcher\" onClick={() => {\n      setThemeMode(themeMode === \"light\" ? \"dark\" : \"light\");\n    }}>\n      <span>{themeMode === \"light\" ? \"Turn Off\" : \"Lights On\"}</span>\n    </div>\n  )\n}\n\nexport default ThemeToggler;\n","import React from \"react\";\n\nimport ThemeToggler from \"./ThemeToggler\";\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>Theme Toggler using Context Example Click below block for Action</h1>\n      <ThemeToggler />\n    </header>\n  );\n};\n\nexport default Header;\n","const ThemeSwitcher = {\n    light: {\n        textColor: \"#2F363F\",\n        backgroundColor: \"#F9DDA4\",\n        border: \"2px solid #F3B431\",\n        btnColor: \"#DFAF2B\",\n    },\n    dark: {\n        textColor: \"#F9DDA4\",\n        backgroundColor: \"#2F363F\",\n        border: \"2px dashed #F9DDA4\",\n        btnColor: \"#586776\",\n    }\n}\n\nexport default ThemeSwitcher;","import React,  { useContext } from 'react';\nimport ThemeContext from '../Context/ThemeContext';\nimport ThemeSwitcher from './ThemeSwitcher';\n\nconst HeroSection = () => {\n    const theme = useContext(ThemeContext)[0];\n    const currentTheme = ThemeSwitcher[theme];\n\n    return (\n        <div style={{\n            padding: \"1rem\",\n            backgroundColor: `${currentTheme.backgroundColor}`,\n            color: `${currentTheme.textColor}`,\n            textAlign: \"center\",\n        }}>\n            <h1>Context API Theme Switcher</h1>\n            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate ipsam voluptatibus neque officiis obcaecati, quo tempore. Et modi doloremque dolorum ducimus culpa rem debitis itaque labore reprehenderit, sit placeat saepe!</p>\n            <button style={{\n                backgroundColor: `${currentTheme.btnColor}`,\n                padding: \"10px 50px\",\n                fontSize: \"20px\",\n                color: '#FFF',\n                border: `${currentTheme.border}`,\n            }}>Click Me</button>\n        </div>\n    )\n}\n\nexport default HeroSection;\n","import React, { useState } from \"react\";\nimport ThemeContext from \"./Context/ThemeContext\";\nimport Header from \"./Components/Header\";\nimport HeroSection from \"./Components/HeroSection\";\nimport './App.css';\n\nconst App = () => {\n  const themeHook = useState(\"light\");\n  return (\n    <ThemeContext.Provider value={themeHook}>\n      <div>\n        <Header />\n        <HeroSection />\n      </div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}